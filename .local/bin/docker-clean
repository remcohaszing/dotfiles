#!/usr/bin/python3

import argparse
import re
import sys
import textwrap

try:
    import docker
except ImportError:
    sys.exit(textwrap.dedent("""
        docker-py not installed.

        $ pip install --user docker-py
    """).strip())


# http://stackoverflow.com/questions/1094841/reusable-library-to-get-human-readable-version-of-file-size
def sizeof_fmt(num, format='{num:>6.1f} {unit:>3}'):
    fmt = format.format
    for unit in ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB']:
        if num < 1024:
            return fmt(num=num, unit=unit)
        num /= 1024.0
    return fmt(num=num, unit='YiB')


client = docker.from_env()


def strip_sha(string):
    return re.sub(r'^sha256:([0-9a-f]{8})[0-9a-f]*', r'\1', string)


def log(dry, type, id, size, extra=None, skip=False):
    msg = []
    if skip:
        msg.append('Skipping')
        if dry:
            msg.append('   ')
    elif dry:
        msg.append('Would remove')
    else:
        msg.append('Removing')
    msg.append('{:<9}'.format(type))
    msg.append(strip_sha(id)[:8])
    msg.append('[{}]'.format(sizeof_fmt(size)))
    if extra:
        msg.append('({})'.format(extra))
    print(*msg)


def remove_containers(dry=True):
    for con in client.containers(all=True, size=True):
        id = con['Id']
        size = con['SizeRootFs']
        args = dry, 'container', id, size, strip_sha(con['Image'])
        if con['Status'].startswith('Up'):
            log(*args, True)
            continue
        log(*args)
        if not dry:
            client.remove_container(id, force=True)
        yield size


def remove_images(dry=True):
    running_ids = {c['ImageID'] for c in client.containers()}
    for img in client.images():
        id = img['Id']
        size = img['Size']
        tag = img['RepoTags'][0]
        if tag == '<none>:<none>':
            tag = None
        args = dry, 'image', id, size, tag
        if not img['ParentId']:
            # Pulled image
            log(*args, True)
            continue
        if img['Id'] in running_ids:
            # Has running container instances
            log(*args, True)
            continue
        log(*args)
        if not dry:
            client.remove_image(id)
        yield size


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Cleanup docker containers and images.')
    parser.add_argument(
        '-c',
        '--containers',
        action='store_true',
        help='remove containers')
    parser.add_argument(
        '-i',
        '--images',
        action='store_true',
        help='remove images')
    parser.add_argument(
        '-a',
        '--all',
        action='store_true',
        help='remove both images and containers')
    parser.add_argument(
        '-d',
        '--dry',
        action='store_true',
        help="show what would be removed, but don't actually remove anything")
    args = parser.parse_args()
    total_size = 0
    if args.all or args.containers:
        total_size += sum(remove_containers(args.dry))
    if args.all or args.images:
        total_size += sum(remove_images(args.dry))
    print()
    if args.dry:
        print(sizeof_fmt(total_size, 'Would clean up {num:.1f} {unit}'))
    else:
        print(sizeof_fmt(total_size, 'Cleaned up {num:.1f} {unit}'))
